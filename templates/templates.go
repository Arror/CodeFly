// Code generated by go-bindata.
// sources:
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x3b\x6f\x13\x41\x10\xee\xef\x57\x8c\xec\x2b\x6c\xc9\x39\xa7\x3e\xc5\x86\x80\x64\x44\x11\x12\x05\x44\x13\xa5\xd8\xdc\xcd\x39\x0b\x77\xbb\xc7\x3e\x12\x2c\x6b\x0b\x2a\xde\x12\x45\x44\x4b\x83\x10\x0d\x20\x1a\x1e\x02\x89\x3f\x13\x9c\x74\xfc\x05\xb4\xf7\xf0\xeb\xce\x92\xc1\x8d\xbd\xb3\x33\xdf\x7c\x33\xdf\xb7\x72\xb7\x0b\xe3\x31\xb8\x52\x82\xdf\x03\x0f\x8c\x71\xa6\x11\xef\x16\x49\x10\x8c\xf1\xe4\x29\x8d\x94\xd3\xed\xda\xab\xc9\x87\xb7\x93\xd7\x8f\xcf\x7f\x7c\xb9\x38\xfb\x0c\xd7\x79\x88\x83\x78\x04\x17\x67\x6f\x26\x4f\x5e\xfd\xf9\xf9\xe2\xf2\xd3\xd7\xf3\x6f\x2f\x2f\xdf\x3d\x9a\x3c\x7d\xfe\xfb\xd9\xfb\xf3\x5f\x1f\x27\x67\xdf\x6d\xa5\x43\x93\x94\x0b\x05\x03\xae\x59\x48\x14\xe5\xac\x8c\xec\x90\x34\x25\x47\x31\x3a\x4e\xaa\x8f\x62\x1a\x80\x54\x42\x07\x6a\x89\x03\x8c\x1d\x00\xb0\xc1\x46\xc3\x92\xcc\x0f\x1b\x20\x08\x1b\x22\xb8\xb4\x03\x6e\x62\x27\xb0\x25\x3b\xa8\x8e\x79\x28\xcb\xb4\x32\xd5\x0d\xb8\x66\xca\x26\xc5\xc8\xc0\x4d\xbc\x6d\x31\xd4\x09\x32\x55\xcd\x14\x28\x53\xce\x24\x96\x88\x01\x67\x0a\x1f\xaa\x53\x41\xd2\x14\x85\xb7\x47\x84\x44\x71\x67\x94\xa2\x85\xd9\x47\xa5\x05\xcb\x4e\x05\x8e\x54\x44\xd1\x00\x22\xcd\x82\x6c\x8c\xa4\x9c\xa2\x35\x6d\x53\xb6\xa2\x11\x30\x84\xcd\x92\xdc\x1c\x91\xf9\xac\xb9\x29\xa3\x8c\xd3\x0a\xf2\xcb\x75\xae\xc0\x07\x1a\xa5\x5a\x63\x8e\xc8\x2b\x26\xb0\x84\xa3\x92\xb0\x9f\xf1\x2f\x50\x66\x19\x19\x6f\x37\xf2\x76\x53\xab\x24\x89\xc1\x98\x2b\x36\x8a\x2c\x04\x63\x3a\x56\x25\xb0\x32\x41\xed\x34\x79\x56\x65\x15\x79\x38\xe0\x49\x1a\xa3\x85\xf5\xe1\x2a\xca\x80\xa4\x94\x0d\xa1\xb5\x8f\x52\xc7\x6a\x2b\x67\x93\x8b\x53\xd2\xe9\xb7\x61\xa3\x0f\x77\x39\x0d\xdb\x85\x4b\x2a\x4e\xb1\x9f\x18\x15\xa4\x44\x1d\x43\x0f\x1a\x85\xb7\x96\xd6\x71\x03\xd5\x9e\x4d\x70\x13\x30\xa6\xb1\x1a\x69\xa6\x5b\xa1\xda\xe6\xfc\xed\x09\x11\x90\x12\x41\x12\x1f\x0e\x6e\x2b\x41\xd9\xd0\x87\x6d\x36\x3a\x84\x1e\x1c\xf8\x87\xce\xff\xc8\x5a\x7a\x52\xc7\xff\xa4\xe4\x62\x3d\x95\xd7\xc8\x4a\x47\xdf\xcc\x2e\xf3\xfa\xbc\x51\x3d\x08\xb3\xb6\xa8\x87\x18\x70\x91\x10\x85\xe1\x80\xc6\x18\x66\xf6\x99\xd9\x68\x0a\x92\x2d\xe6\xa0\xb1\xe0\xb1\x86\x5d\x8d\x8d\xb0\xfc\x3c\xb7\xde\x82\xb3\x12\x7a\x1d\xdf\x79\x84\x8d\x6a\xfc\xb5\x2a\x14\x4b\xac\xfa\x63\x2d\xdd\x2a\x68\x4b\x06\xd9\x6a\x4a\x94\x92\x72\xd6\xec\x7b\x5b\x4d\xca\x4e\xf8\x7d\x6c\xf6\x5b\xd6\x7d\x7e\xe6\xc1\x4e\xd9\x29\xfb\xea\xc0\xbc\xe9\xc7\x90\x1b\x1c\x77\x8f\xee\x61\xa0\x80\x32\x67\xe1\xa9\x84\x1c\xc6\x4e\xe5\x5d\x59\xf6\x85\x43\x7a\xa0\xc4\x08\xea\x5e\x4a\x8b\xb0\x91\xbf\x08\xdf\xae\x42\xcd\xc8\x14\xaf\xce\x93\x3a\x08\x10\xc3\x56\xde\xa0\xbd\x54\x63\x20\x20\x2a\x38\xce\x28\xa0\x10\x5c\xd4\xf1\xab\x82\x46\x84\xc6\x5a\x60\x2b\x2b\x69\xb7\x17\x21\x67\x00\xa6\x03\x45\xa6\x5d\x4d\x8e\xbf\xbc\x92\xf5\xc1\x4d\xfe\xd3\xd4\xff\x99\x14\xba\x9a\xbf\x01\x00\x00\xff\xff\xfb\x78\x1c\x21\x14\x07\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 1812, mode: os.FileMode(420), modTime: time.Unix(1501217606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x3b\x8f\x13\x3d\x14\xed\xe7\x57\x5c\x45\x29\x36\xd2\xf7\x4d\xa8\x23\x45\x2b\x58\x18\x89\x82\x87\x04\xdd\x2a\x85\x37\xe3\x09\x96\x26\x1e\x73\xed\xd9\x30\x1a\x4d\x41\xc5\x5b\xa2\x88\x68\x69\x10\xa2\x01\x44\xc3\x43\x20\xf1\x67\x42\x76\x3b\xfe\x02\xb2\x33\x33\x3b\x0f\x27\x4a\xc4\x0a\x51\xd0\x24\xb2\x7d\x7d\x7c\xcf\xf1\xf1\x49\xfa\x7d\x48\x53\xe8\x4a\x09\x83\x21\xb8\x90\x65\x4e\x39\xe3\x5e\x27\x53\x0a\x59\xe6\xca\x19\x0b\x94\xd3\xef\xeb\xa5\xe5\xdb\x57\xcb\x17\x0f\x16\x5f\x3f\x9e\xcc\x3f\xc0\x41\xe4\x53\x2f\x4c\xe0\x64\xfe\x72\xf9\xf0\xf9\xcf\x6f\x4f\x4f\xdf\x7f\x5a\x7c\x7e\x76\xfa\xfa\xfe\xf2\xd1\x93\x1f\x8f\xdf\x2c\xbe\xbf\x5b\xce\xbf\xe8\x9d\x0e\x9b\x8a\x08\x15\x78\x51\xcc\x7d\xa2\x58\xc4\x8b\x99\x6b\x44\x08\x72\x14\x52\xc7\x11\xf1\x51\xc8\xc6\x20\x15\xc6\x63\xd5\xe8\x61\x50\xd6\x41\xea\x00\x80\x5e\xee\x74\x74\xbb\xab\xc1\xff\x80\x84\x4f\x28\x74\xd9\x7f\xd0\x0d\x0c\x17\x8f\xd1\xd0\x97\x45\x49\x51\xd6\xe5\x1a\x70\x30\x34\xe0\xe3\x88\x2b\x7a\x4f\xcd\x90\x08\x41\xd1\xf5\x22\x9c\x12\x45\x7d\x8f\x85\xd4\x37\x07\x77\x83\xa2\x81\x3a\x08\x52\x19\x87\x6a\x0d\xcc\x4d\x82\x92\xe2\xed\x44\x98\xfd\xe6\x3b\xdf\x9f\x33\x3c\x26\x68\xe8\xf1\x82\x9b\x1e\xac\x20\x8b\xf2\x34\x05\x16\xe8\xed\x37\x84\x16\x8b\x84\x90\x65\xfb\x69\x0a\x94\xfb\x55\xd2\xf9\xb0\x0a\xce\x38\x53\x7b\xbd\x5c\xa5\x96\x52\x7f\x5a\xad\xdf\x55\xac\x8a\xc1\x02\xa0\x77\x6b\x9a\x04\x24\x94\x8d\xcb\x29\x55\x85\x61\x55\xd6\xcb\x34\x20\xfa\x7c\x0b\x6c\x45\x52\xcb\x94\x45\x5c\xc2\x93\x01\x5c\xe4\xc9\x7e\x0f\x52\x73\xc6\x38\x8a\xb9\xa1\x16\x52\x6e\x57\xd2\x72\x03\x2c\x00\x4e\x8b\xbd\x17\xaa\xab\x93\x98\xa0\x0f\x21\x55\x30\x25\x02\x86\x40\x78\x02\x44\xee\xc3\xe1\x2d\x85\x8c\x4f\xcc\xd9\x23\xa0\x9a\x7a\x0a\xea\x0e\x46\xb3\xf2\x71\x5c\x41\x8c\xd0\xf5\xd9\xd8\x08\x84\xc9\x41\xc4\x8f\x29\x2a\x8f\xe8\x3b\xd2\x8d\xf7\x60\x43\x5b\x3b\x98\xe3\xdc\x4d\x72\x5e\x46\x29\x71\x98\xbc\x44\xe4\xba\xb6\xae\x9a\xc5\x15\x4e\xfd\xe1\x59\xc1\x5a\x4f\x71\xbd\xe1\x74\x69\x7e\x74\x96\x4d\x89\x38\xec\xe8\x92\x92\x73\x67\x64\xae\xd2\xfa\xe0\xe9\xca\xcc\x0a\x13\x5b\xc1\xca\x76\x36\xc4\x5e\x3d\x17\x5a\xfe\x6e\xbc\x11\x1b\xb9\xb2\xe3\xb2\x8a\x05\xc6\x81\xda\x7f\x3b\xb0\xa8\xc4\x4e\x5b\x1d\x51\xae\x65\xb9\x7b\x6b\xc5\x36\x27\x0b\x8c\x04\x45\xd5\xf0\xb1\x55\x84\x33\xf0\xb5\x4c\x9b\x4a\x54\x38\xee\xa4\xf7\x5f\xce\x72\x83\x15\xda\x4b\xdb\x24\xa0\xfe\x6c\xfe\x7e\x15\x21\xb8\x75\x04\x96\xf9\x6d\x49\x3c\xa4\x2a\x46\x0e\x87\x83\x91\xb3\xe9\xbe\x5a\x81\xa5\x1b\xd1\x61\x07\xc3\x7a\x38\xee\xf5\xfe\x85\xdc\x56\x21\xa7\xc5\x6b\xbf\xed\x76\x90\x55\x2c\x7e\x16\x54\xf5\xc9\x0d\x7f\x57\x5c\xc2\x13\x7b\x46\x59\xdd\xd7\xb8\xb0\xdc\x1c\xba\xd5\xf5\x16\xcd\x9c\x5f\x01\x00\x00\xff\xff\xd1\x71\x66\x79\xc9\x0a\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 2761, mode: os.FileMode(420), modTime: time.Unix(1500947588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

