// Code generated by go-bindata.
// sources:
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1499221380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4b\x8b\x13\x4d\x14\xdd\xf7\xaf\xb8\x0c\x59\x4c\xe0\xa3\xf3\xad\x03\x61\xd0\xd1\x06\x17\x3e\x40\x77\x43\x16\x35\xe9\xdb\xb1\xa0\x53\x5d\xde\xae\x9e\xd8\x34\xb5\x70\xe5\x1b\x5c\x04\xb7\x6e\x44\xdc\xa8\xb8\xf1\x81\x82\x7f\x26\x66\x66\xe7\x5f\x90\xaa\xee\xf4\x2b\x1d\x99\x41\x90\x6c\x66\x9a\xaa\xfb\x38\xe7\xdc\x53\x37\x83\x01\x64\x19\xf4\xe2\x18\x86\x23\x70\x41\x6b\xa7\x3c\x71\x6f\xb0\x19\x82\xd6\x6e\x3c\xe7\x81\x72\x06\x03\x73\xb5\x7a\xf7\x7a\xf5\xf2\xe1\xf2\xdb\xa7\xd3\xc5\x47\x38\x8c\x7c\xf4\xc2\x14\x4e\x17\xaf\x56\x8f\x5e\xfc\xfa\xfe\xec\xec\xc3\xe7\xe5\x97\xe7\x67\x6f\x1e\xac\x1e\x3f\xfd\xf9\xe4\xed\xf2\xc7\xfb\xd5\xe2\xab\xc9\x74\xf8\x4c\x46\xa4\xc0\x8b\x12\xe1\x33\xc5\x23\xb1\x3e\xb9\xce\xa4\x64\xc7\x21\x3a\x8e\x4c\x8e\x43\x3e\x81\x58\x51\x32\x51\x2d\x0c\xc3\x32\x0e\x32\x07\x00\xcc\x35\x31\x31\x45\xe8\xf1\xff\xa0\x17\x58\xf4\x1e\xc7\xd0\x8f\x41\x6b\x9b\x2c\xcc\x99\x29\x31\x89\x84\xc2\xfb\x6a\x4e\x4c\x4a\x24\xd7\x8b\x68\xc6\x14\xfa\x1e\x0f\xd1\xb7\xe5\x7b\xc1\xba\x8d\x4d\x24\x8c\x93\x50\x6d\xc9\xbe\xc5\x28\x46\xba\x93\x4a\x9b\x66\xff\x6b\x6d\x11\x15\xf0\x4f\x18\x15\xed\x0d\xea\xaa\xde\x3a\x36\xcb\x80\x07\x26\xf7\xa6\x34\x32\xb0\x10\xb4\x3e\xc8\x32\x40\xe1\xe7\xb7\xf9\x87\x53\xaf\xc9\x05\x57\xfb\xfd\x82\xf9\x39\xd9\x1b\x42\xff\x4c\x00\xc8\x59\xe1\xbd\x06\xb1\x80\x85\x71\x29\x4f\x01\x3b\x07\xa6\x35\x8c\xea\xda\x5c\xc1\x80\x99\x96\x35\x01\x2a\x25\x4c\x66\x87\x1e\x4c\xa4\x43\xb8\x24\xd2\x83\x3e\x64\xb6\xd6\x24\x4a\x84\x45\x1d\xa2\xa8\xc9\x51\xef\xce\x03\x10\xb8\x8e\xfc\xbf\x7e\x39\x4d\x18\xf9\x10\xa2\x82\x19\x93\x30\x02\x26\x52\x60\xf1\x01\x1c\xdd\x56\xc4\xc5\xd4\x76\x1a\x03\x1a\x42\x19\xa8\xbb\x14\xcd\x4b\x47\x5e\x25\x8a\xc8\xf5\xf9\xc4\xd2\xa6\xf4\x30\x12\x27\x48\xca\x63\x46\x5f\x03\xb3\x0f\x7a\x27\x27\xd6\xe3\xf1\x65\x16\x6f\x6b\x7a\xcd\x5e\xe6\x69\x4d\x0b\xb7\x14\x6d\x7a\x79\xfb\xb0\x4d\x68\xd1\x51\xeb\x19\x93\x47\x7b\xb5\x90\xbd\xb1\x95\xbb\xf3\xbd\x60\x6e\x23\x45\x69\x57\x40\x6e\x84\xcd\x7a\xfd\xd2\x41\x50\xd5\xd8\xc0\x51\xc2\xe5\x81\x9d\xbe\x99\xfd\xb9\xb1\xd5\x5e\xe4\x26\x63\x59\xde\xe9\xc2\x37\x8d\xe0\x2e\x0f\x49\x8a\x24\x92\x6a\x39\xa8\x83\x5a\xad\x74\xc5\xad\x8b\xca\x05\xe4\xda\x15\x32\xd5\xc8\x5a\x5f\xed\x8d\x60\xfe\xb6\x37\xef\x7a\x29\x5c\x68\x25\x98\xb5\xd5\xb1\x12\x08\x55\x42\x02\x8e\x86\xe3\x2e\x91\x4d\x37\xf3\xe6\x61\xd4\xdc\x11\xfb\x7d\xd8\xe9\x35\xfd\xd7\x8f\xde\x90\xce\x47\x58\xc2\xd9\x1b\x77\xbc\xf0\xda\x90\x2b\xf9\x9a\x87\x7f\xf8\x21\x74\x99\x48\x3b\x3c\xe0\xb4\xa7\x63\x47\x90\x65\x28\xfc\xd2\x17\xda\xf9\x1d\x00\x00\xff\xff\x65\xf1\x38\xa6\xd5\x08\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 2261, mode: os.FileMode(420), modTime: time.Unix(1500888589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

