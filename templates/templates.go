// Code generated by go-bindata.
// sources:
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1499221380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcb\x8a\x13\x41\x14\xdd\xf7\x57\x5c\x42\x16\x13\xd0\x8e\xeb\x40\x08\x3a\xda\xe0\xc2\x07\xe8\x2e\x64\x51\x93\xae\x8e\x05\x9d\xea\xf2\x76\xf5\xc4\xa6\xe9\x85\x2b\xdf\xe0\x22\xb8\x75\x23\xe2\x46\xc5\x8d\x0f\x14\xfc\x99\x98\x99\x9d\xbf\x20\x55\xfd\x98\x7e\x54\x42\x06\x07\x71\x31\x9b\x84\xaa\xba\x75\xea\x9e\x53\xa7\x4e\xd2\xef\x43\x92\x40\x37\x0c\x61\x30\x04\x1b\xd2\xd4\x2a\x67\xec\x9b\x64\x4e\x21\x4d\xed\x70\xc1\x3c\x69\xf5\xfb\x6a\x69\xfd\xfe\xcd\xfa\xd5\xa3\xd5\xf7\xcf\x47\xcb\x4f\xb0\x1f\xb8\xd4\xf1\x63\x38\x5a\xbe\x5e\x3f\x7e\xf9\xfb\xc7\xf3\xe3\x8f\x5f\x56\x5f\x5f\x1c\xbf\x7d\xb8\x7e\xf2\xec\xd7\xd3\x77\xab\x9f\x1f\xd6\xcb\x6f\x6a\xa7\xc5\xe6\x22\x40\x09\x4e\x10\x71\x97\x48\x16\xf0\x62\xe6\x06\x11\x82\x1c\xf8\xd4\xb2\x44\x74\xe0\xb3\x29\x84\x12\xa3\xa9\x6c\xf4\x30\x28\xeb\x20\xb1\x00\x40\x2d\x77\x3a\xaa\xdd\x6c\x70\x11\x90\xf0\x19\x85\x2e\xbb\x00\x5d\x4f\x73\x71\x18\xf5\xdd\xb0\x28\x29\xca\xba\x5c\x01\x0e\x86\x1a\x7c\x1a\x70\x49\x1f\xc8\x05\x12\x21\x28\xda\x4e\x80\x73\x22\xa9\xeb\x30\x9f\xba\xfa\xe0\xae\x57\x34\x50\x07\x41\x1a\x46\xbe\xdc\x00\x73\x9b\x60\x48\xf1\x6e\x2c\xf4\x7e\xfd\x9d\xef\xcf\x19\x1e\x12\xd4\xf4\x78\xc1\x4d\x0d\x32\xc8\xa2\x3c\x49\x80\x79\x6a\xfb\x2d\xa1\xc4\x22\x3e\xa4\xe9\x28\x49\x80\x72\xb7\x4a\x3a\x1f\x56\xc1\x19\x67\x72\xaf\x97\xab\xd4\x52\xea\x5f\xab\xf5\xb7\x8a\x55\x31\x98\x07\xf4\x7e\x4d\x13\x8f\xf8\x61\xe3\x72\x4a\x55\x61\x58\x95\xf5\x2a\xf5\x88\x3a\xdf\x00\x5b\x91\xd4\x30\x65\x10\x97\xf0\x78\x00\x97\x79\x3c\xea\x41\xa2\xcf\x98\x06\x11\xd7\xd4\x7c\xca\xcd\x4a\x1a\x6e\x80\x79\xc0\x69\xb1\xf7\x52\x75\x75\x16\x11\x74\xc1\xa7\x12\xe6\x44\xc0\x10\x08\x8f\x81\x84\x23\x18\xdf\x91\xc8\xf8\x4c\x9f\x3d\x01\xaa\xa8\x27\x20\xef\x61\xb0\x28\x1f\xc7\x35\xc4\x00\x6d\x97\x4d\xb5\x40\x18\xef\x07\xfc\x90\xa2\x74\x88\xba\x23\xd5\x78\x0f\xb6\xb4\x75\x0a\x73\x9c\xb9\x49\xce\xca\x28\x25\x0e\x0b\xaf\x90\x70\x53\x5b\xd7\xf5\x62\x86\x53\x7f\x78\x46\xb0\xd6\x53\xdc\x6c\x38\x55\x9a\x1f\x9d\xa6\x73\x22\xc6\x9d\x4a\x49\x67\xa2\x2f\xd2\xf8\xdc\x69\x66\x65\x89\xb1\xa9\x20\x33\x5d\x1b\xaf\x57\xcf\x84\x96\xb7\x1b\xef\xc3\x44\xac\xec\xb6\xac\x62\x9e\x76\x9f\xf2\xde\xce\x0c\x2a\x81\xd3\xd6\x45\x94\x6b\x69\xee\xdb\x5a\xb1\xc9\xc3\x02\x03\x41\x51\x36\x1c\x6c\x10\xe0\x04\x7a\x23\xcb\xa6\x0a\x15\x7e\xa7\x50\xfa\xbf\x66\xb8\xc5\x02\xed\xa5\x5d\x52\x4f\x7d\x36\x7f\xb3\x8a\xe0\xdb\x39\xf6\xca\xcc\x36\xa4\x1c\x52\x19\x21\x87\xf1\x60\x62\x6d\xbb\xab\x56\x48\xa9\x46\x54\xc0\xc1\xb0\x1e\x88\x7b\xbd\xf3\x60\xdb\x29\xd8\x94\x78\x99\xc5\xca\x86\x3b\x13\x43\x78\x55\x4c\x78\x12\x4f\xf5\xc9\x2d\x7f\x51\x6c\xc2\x63\x73\x36\x19\xdd\xd7\xb8\xb0\xdc\x1c\xaa\xd5\xcd\x16\x4d\xad\x3f\x01\x00\x00\xff\xff\x9c\xb8\x0a\x2f\xbd\x0a\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 2749, mode: os.FileMode(420), modTime: time.Unix(1500890258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

