// Code generated by go-bindata.
// sources:
// templates/swift/enum.tpl
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftEnumTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\xe3\x40\x14\x85\xfb\x79\x8a\x5b\xa8\x34\x52\x6f\x70\xe5\xb5\x60\x8b\xdd\x72\x6b\x5f\x5b\x57\xcb\xc0\x68\x34\xcc\x4f\x1c\x33\xa8\x48\x95\x7f\x48\x61\xd2\xa6\x09\x21\x4d\x12\xd2\xe4\x87\x04\xf2\x32\x8e\xec\x2e\xaf\x10\x46\xb2\x40\x45\xa6\x3c\x73\xce\xb9\xdf\x49\x12\xf0\x1e\x22\x63\x60\x38\x82\x18\xaa\x8a\xb5\x4a\xfc\x17\x0b\x82\xaa\x8a\xcd\x82\xe7\x96\x25\x49\xd0\xeb\xbb\xeb\xfa\xf2\x70\xfd\xf6\xb4\x59\x3d\xc2\xb8\xcc\x28\x15\x4b\xd8\xac\xae\xea\xa3\x8b\xaf\xf7\xb3\xed\xc3\xf3\xfa\xe5\x7c\x7b\x73\x50\x1f\x9f\x7e\x9e\xdc\xae\x3f\xee\xeb\xd5\x6b\x48\x32\x5e\xa8\x52\x5b\x48\x4b\x27\x33\xb4\xbc\x94\x9d\xf2\x07\x95\xc2\x99\x20\xc6\x94\x9b\x09\x3e\x07\x92\xae\xe8\x9f\x1f\xc2\x6f\x69\x07\x30\x91\xae\xe8\xbc\xe0\x19\x03\x00\xd8\x25\xec\x52\x11\x0a\x8e\x06\x26\x30\x0a\xee\xe6\xd3\x7b\xd0\x28\xff\x13\x44\x7c\x00\x51\xde\x8c\x0b\x25\xf1\x3f\x14\x8e\x4c\xd8\x19\x6c\x73\x34\xb4\xdb\x1f\x8f\x4b\x69\x69\xdf\x2e\x34\x2a\x45\x3a\x4e\x4b\x5d\xa0\xa5\x2c\xe5\x82\xb2\x86\x26\xca\x3b\x2a\x18\x35\xa1\xbc\x6d\x0b\x82\xf7\x40\x32\x0b\xb5\x7d\x36\x63\xd1\xf2\x39\xec\xa1\x86\x69\x46\x39\x3a\x61\xa7\xc3\xfe\x3c\xf0\x4d\x91\x26\xe3\x84\x0d\x90\x3f\x80\x04\xec\x5f\x6d\xb8\x3d\xd7\x28\xdd\x82\xf0\x34\x59\xa7\x65\xaf\x29\xde\xf9\x3b\x53\xc5\x2a\xf6\x1d\x00\x00\xff\xff\x5f\xae\x31\x19\xe9\x01\x00\x00")

func templatesSwiftEnumTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftEnumTpl,
		"templates/swift/enum.tpl",
	)
}

func templatesSwiftEnumTpl() (*asset, error) {
	bytes, err := templatesSwiftEnumTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/enum.tpl", size: 489, mode: os.FileMode(420), modTime: time.Unix(1558720997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1558720652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\x4b\x8b\x13\x41\x10\xbe\xcf\xaf\x28\x96\x1c\x36\xb0\x4c\xee\x81\x10\x24\x32\x17\xf1\x01\x0a\x1e\xc4\x43\x6f\xa6\x26\xb4\x74\x6a\x86\xee\x9e\xdd\x1d\x9a\x3e\x78\xf2\x0d\x1e\x82\x57\x2f\x22\x5e\x54\xbc\xf8\x40\xc1\x3f\x13\x67\xf7\xe6\x5f\x90\xea\x4c\x66\xc6\x88\x8f\xbd\x38\x87\x64\xba\xba\xbe\xaa\xef\xfb\xaa\x66\x34\x02\xe7\x60\x60\x0c\x8c\x27\x10\x83\xf7\x51\x1b\x89\xaf\x88\x25\x82\xf7\xb1\x39\x96\x99\x8d\x46\x23\xbe\xaa\x5f\xbf\xa8\x9f\xdd\x5b\x7f\x7e\x7f\xba\x7a\x07\xb3\x3c\xc5\x44\x55\x70\xba\x7a\x5e\xdf\x7f\xfa\xfd\xcb\xe3\xb3\xb7\x1f\xd6\x1f\x9f\x9c\xbd\xbc\x5b\x3f\x78\xf4\xed\xe1\xab\xf5\xd7\x37\xf5\xea\x13\x23\x23\xb9\x2c\x72\x6d\x21\xc9\x4b\x4a\x85\x95\x39\x6d\x23\x97\x45\x51\x88\x43\x85\x51\x54\x94\x87\x4a\xce\xc1\x58\x5d\xce\xed\x0e\x87\x71\x9b\x07\x2e\x02\x00\xbe\xd6\x82\x16\x08\x03\x79\x00\x83\x2c\xb0\x4f\x24\xaa\xd4\x80\xf7\x01\x4c\x1c\xe3\x12\xb3\x9c\x2c\x9e\xd8\x63\x2d\x8a\x02\x75\x9c\xe4\x7a\x29\x2c\xa6\x89\x54\x98\x86\xf2\x83\x6c\xdb\x26\x00\x35\x9a\x52\xd9\xdf\xa0\xaf\x09\x6d\x50\xdf\xa8\x8a\x00\x0b\xff\xde\x07\x46\x0d\xfd\x23\xa1\x9b\xf6\xcc\xba\xab\xb7\xcd\x75\x0e\x64\xc6\xd8\xab\x05\xdb\x20\x14\x78\x3f\x75\x0e\x50\x99\xc0\x60\xd2\xc7\x5c\xc4\x4c\x30\x97\x00\x43\x4a\xfb\x2f\x51\xbf\xab\x24\x69\xf7\x87\xe0\x7e\x8d\x4e\xf7\x05\x55\x63\xb8\x40\xd5\x74\xd8\x78\xc7\x4f\xfb\xb2\x28\x85\x4e\x41\xa1\x85\x46\x22\x4c\xd8\xeb\x9b\x9b\x03\x83\x87\x1b\x6e\x0e\x34\xda\x52\x13\x90\x54\xe0\x5b\xfc\x3f\x0c\x82\xbd\x3d\xff\x2c\xfa\x1d\x36\x35\x82\x3b\x0d\xf4\xd6\x2c\x4f\x25\x2d\x2e\x61\x65\xe2\x5e\xc2\xed\xce\x1e\x86\x6e\x7e\x77\xc7\x73\xc7\xe4\x14\x1c\xe9\xf9\xd1\x68\xeb\x94\xc7\x78\xc2\xfb\x19\xb2\x5a\x6b\x24\xfd\x07\xbd\xfc\xfc\x45\x65\xb3\x25\xcd\xf1\x67\xcd\x9d\xee\xed\x32\x68\x79\x24\x2c\x02\x52\xb9\x84\xae\xe0\x18\xae\x5b\x2d\x69\x71\xd0\xc5\xc0\xfd\x59\x5e\x5b\x7f\x2e\x78\x21\xdc\xb9\x3f\xaf\x09\xec\x31\xaa\x0d\xec\xed\x8e\xcb\x47\x3f\x02\x00\x00\xff\xff\xc0\x0f\x0c\xe5\x91\x04\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 1169, mode: os.FileMode(420), modTime: time.Unix(1558720997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/enum.tpl": templatesSwiftEnumTpl,
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"enum.tpl": &bintree{templatesSwiftEnumTpl, map[string]*bintree{}},
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

