// Code generated by go-bindata.
// sources:
// templates/swift/enum.tpl
// templates/swift/service.tpl
// templates/swift/struct.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSwiftEnumTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbf\x4a\x03\x41\x18\xc4\xfb\x7d\x8a\x29\xae\x0c\x7b\x7d\x20\x95\xe4\xc0\x42\x4b\xfb\x4d\xee\x3b\x59\xd8\xdb\x5d\x6e\xf7\x88\x61\xb9\xc2\xca\xff\x60\x11\x6c\x6d\x44\x6c\x54\x6c\xfc\x83\x82\x2f\x13\x2f\xe9\x7c\x05\xd9\x4b\x0e\x6c\x7f\xdf\xcc\x7c\x33\x69\x8a\x10\x90\x38\x87\xe1\x08\x1c\x4d\xc3\x36\x84\xef\x8b\x92\xd0\x34\xdc\xcd\x64\xe1\x59\x9a\x46\xde\x3e\xde\xb5\x37\x27\xcb\xcf\xd7\xd5\xe2\x05\x3b\x26\xa7\x4c\xcd\xb1\x5a\xdc\xb6\xa7\xd7\xbf\x5f\x97\xeb\xe7\xb7\xe5\xfb\xd5\xfa\xfe\xb8\x3d\xbb\xf8\x39\x7f\x58\x7e\x3f\xb5\x8b\x8f\xe8\x64\xb2\xb4\xa6\xf2\xc8\x4c\xad\x73\xe1\xa5\xd1\x3d\xd9\x13\xd6\x8a\x89\x22\xc6\x6c\x3d\x51\x72\x0a\xd2\x75\xf9\xff\xfd\x10\xbb\xda\x0f\x30\xd6\x75\xd9\x6b\x11\x18\x03\x80\xad\xc3\xcf\x2d\x09\x25\x85\xc3\x18\xa3\xa8\xee\x8e\x21\xa0\x12\xfa\x90\x90\xc8\x01\x92\xa2\x1b\x17\x43\xf8\x81\x50\x35\xb9\xb8\x33\xca\xa6\xc2\xd1\x76\x3f\x9f\x1a\xed\xe9\xc8\xcf\x2a\x61\x2d\x55\x3c\x33\x55\x29\x3c\xe5\x99\x54\x94\x77\x6d\x92\xa2\x6f\x85\x51\x67\x2a\x36\x69\x11\x84\x00\xd2\x79\x8c\x6d\xd8\x5f\x00\x00\x00\xff\xff\x98\x22\x03\x66\x53\x01\x00\x00")

func templatesSwiftEnumTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftEnumTpl,
		"templates/swift/enum.tpl",
	)
}

func templatesSwiftEnumTpl() (*asset, error) {
	bytes, err := templatesSwiftEnumTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/enum.tpl", size: 339, mode: os.FileMode(420), modTime: time.Unix(1499137511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftServiceTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesSwiftServiceTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftServiceTpl,
		"templates/swift/service.tpl",
	)
}

func templatesSwiftServiceTpl() (*asset, error) {
	bytes, err := templatesSwiftServiceTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/service.tpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1499122437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwiftStructTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\x3f\x8b\xd4\x40\x14\xef\xf3\x29\x1e\xc7\x16\xb7\x70\x64\xfb\x40\x58\xe4\x24\x8d\xa8\x85\xa2\x85\x58\xcc\x6d\x5e\x96\x91\xd9\xc9\x30\x99\xdc\x5d\x18\xa6\xb0\xf2\x3f\x58\x2c\xb6\x36\x22\x36\x2a\x36\xfe\x41\xc1\x2f\xb3\xe6\xae\xf3\x2b\xc8\xcb\x26\x93\x18\x75\xad\x34\xc5\x32\xf3\x66\x7e\xef\xf7\x67\xde\xce\x66\x60\x2d\x4c\x8a\x02\xa2\x18\x42\x70\x2e\xf0\x95\xf0\x0a\x5b\x21\x38\x17\x16\x27\x3c\x33\xc1\x6c\x46\x47\xf5\xeb\x17\xf5\xb3\x7b\x9b\xcf\xef\xcf\xd6\xef\xe0\x30\x4f\x31\x11\x15\x9c\xad\x9f\xd7\xf7\x9f\x7e\xff\xf2\xf8\xfc\xed\x87\xcd\xc7\x27\xe7\x2f\xef\xd6\x0f\x1e\x7d\x7b\xf8\x6a\xf3\xf5\x4d\xbd\xfe\x44\xc8\x80\xaf\x54\xae\x0d\x24\x79\x29\x53\x66\x78\x2e\xbb\xca\x65\xa6\x14\x3b\x12\x18\x04\xaa\x3c\x12\x7c\x01\x85\xd1\xe5\xc2\x8c\x34\x44\xfe\x1e\xd8\x00\x00\xe8\x58\x33\xb9\x44\x98\xf0\x03\x98\x64\x8d\xfa\x84\xa3\x48\x0b\x70\xae\x01\x4b\x42\x46\x71\xd3\x65\x91\x4b\x83\xa7\xe6\x44\x33\xa5\x50\x87\x49\xae\x57\xcc\x60\x9a\x70\x81\x69\xc3\x30\xc9\x3a\xa6\x06\x6b\x2a\xf5\x27\xec\xf5\x4a\xe1\x35\xa3\xb9\x5c\x12\x88\x76\x14\x1a\x49\x6a\xf5\x1f\x33\xdd\xf3\x93\x72\xdf\xd0\x39\x6b\x81\x67\x84\xbb\xaa\x28\x03\x26\xc0\xb9\xb9\xb5\x80\xa2\x68\xb8\xe3\xce\xf6\x88\xf4\x22\x66\xac\x14\xe6\x06\x13\x25\x0e\x9b\xa1\x4c\x87\x8b\x60\xa8\x83\x4b\x6e\xf6\xa7\x60\x7f\xad\xce\xf7\x99\xac\x22\xb8\x20\xab\xf9\xb4\x8d\x93\x3e\xbf\x58\x96\x4c\xa7\x20\xd0\x40\xcb\x0f\x31\xc5\x7f\x73\xbb\x21\xf0\x74\xab\xd8\x82\x46\x53\x6a\x09\x92\x0b\x70\x1e\xff\xcf\xde\x66\xc8\xd0\xe5\x0b\x71\xa7\xf2\xd6\x61\x9e\x72\xb9\xbc\x84\x55\x11\x0e\x2e\xdc\xee\xe3\x21\xe8\xf6\x77\xfc\x60\x77\x8a\x5c\x36\x89\x0c\xf2\x68\xbd\xf5\xce\x43\x3c\xa5\x91\x6d\x6e\xf9\x68\xb8\xfc\x0f\x7e\xe9\xfb\x8b\xcb\x76\x76\xda\xed\xcf\x9e\x7b\xdf\xdd\x30\x68\x7e\xcc\x0c\x02\xca\x72\x05\x7d\xc3\x08\xb6\x93\x7d\xd0\xd7\xc0\xee\xb6\xe7\xfb\x2f\x18\x0d\xc4\x6f\xa7\x77\xe7\xdf\x2d\x86\x3d\x42\xf9\xc2\xde\xf8\xb9\x5c\xf0\x23\x00\x00\xff\xff\x7e\x33\x1d\x83\xa4\x04\x00\x00")

func templatesSwiftStructTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwiftStructTpl,
		"templates/swift/struct.tpl",
	)
}

func templatesSwiftStructTpl() (*asset, error) {
	bytes, err := templatesSwiftStructTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swift/struct.tpl", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1499140025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/swift/enum.tpl": templatesSwiftEnumTpl,
	"templates/swift/service.tpl": templatesSwiftServiceTpl,
	"templates/swift/struct.tpl": templatesSwiftStructTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"swift": &bintree{nil, map[string]*bintree{
			"enum.tpl": &bintree{templatesSwiftEnumTpl, map[string]*bintree{}},
			"service.tpl": &bintree{templatesSwiftServiceTpl, map[string]*bintree{}},
			"struct.tpl": &bintree{templatesSwiftStructTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

